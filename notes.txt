Triangle setup
order: 

calc c(still need to save this correctly) 
calc a
calc b

multiplications for coeff c: 
x0 y2 = c1 (in e0c)// save these
x2 y0 = c2 (in e1c)// save this
out = c1 - c2
x2 y1 = c1 (in e0a) (still need to save this correctly)(w_intermediatec_0)
x1 y2 = c2 (in e1a) (still need to save this correctly)(w_intermediatec_1)
out = c1 - c2
x1 y0 = c1 (in e2a)(w_intermediatec_2)
x0 y1 = c2 (in e0b)(w_intermediatec_3)
out = c1 - c2

computer basis deltas in setup 


Triangle binner: 
normalization of coefficients: 
addition: 
glm::abs(ee0.x) + glm::abs(ee0.y) = c0 => e0.c
glm::abs(ee1.x) + glm::abs(ee1.y) = c1 => e1.c
glm::abs(ee2.x) + glm::abs(ee2.y) = c2 => e2.c
rcp : 
1/c0
1/c1
1/c2
mul: 
ee0.x*1/c0 => , ee0.y*1/c0, ee0.z*1/c0 , ee1.x*1/c1
ee1.y*1/c1 , ee1.z*1/c1, ee2.x*1/c2 , ee2.y*1/c2
ee2.z*1/c2

Initial edge functions
3 Multiplications + reduction

TR edge function 
float edgeFuncTR0 = edgeFunc0 + ((ee0.x * (scTileCornerOffsets[edge0TRCorner].x + txxOffset)) + (ee0.y * (scTileCornerOffsets[edge0TRCorner].y + tyyOffset)));
float edgeFuncTR1 = edgeFunc1 + ((ee1.x * (scTileCornerOffsets[edge1TRCorner].x + txxOffset)) + (ee1.y * (scTileCornerOffsets[edge1TRCorner].y + tyyOffset)));
float edgeFuncTR2 = edgeFunc2 + ((ee2.x * (scTileCornerOffsets[edge2TRCorner].x + txxOffset)) + (ee2.y * (scTileCornerOffsets[edge2TRCorner].y + tyyOffset)));
ee0.x * (offset + txxOffset) + ee0.y*(offset+tyyOffset)
1st step -> offset0.x + txx , offset0.y +tyy
            offset1.x + txx , offset1.x +tyy
step 2 -> multiplication 
step 3 -> reduction 
then for final tr2 
addition 
multiplication 
reduction 

if any are <0  (outside triangle)
then reject tile and move on 

TA edge function calculation 
same steps  above but offsets with TA calculated


else 
send to raster

Fragment shading

calculation of basis functions 
for basis functions we can calculate each func in 2 steps per point 
or 4 points in 4 steps 

F0 answers stored in r_basis_F0 
F1 stored in r_basis_F1
F2 stored in r_intermediate
r calculation
add f0 and f1 
use w_simd_reg + r_intermediate and then store in intermediate after rcp 


calculation of paraneterization coefficients  

determining the position in the loop im in 
if i have a n 
binning: 
F2 is stodred in r_intermediate_Result
R is stored in r_intermediate_result 

binner debug: 
normalization works 
tr and ta indices check 